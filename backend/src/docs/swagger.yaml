openapi: 3.0.0
info:
  title: PrimeTrade API
  version: 1.0.0
  description: REST API documentation for PrimeTrade backend
  contact:
    name: API Support
    email: support@primetrade.ai

servers:
  - url: http://localhost:4000/api
    description: Development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
                adminSecret:
                  type: string
                  description: Optional - required for admin registration
                  example: "super-admin-secret-2024-change-this"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
        400:
          description: Validation error
        403:
          description: Invalid admin secret key

  /auth/setup-admin:
    post:
      summary: Setup first admin user
      description: Only works if no admin exists in the system
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - adminSecret
              properties:
                name:
                  type: string
                  example: "Admin User"
                email:
                  type: string
                  example: "admin@primetrade.ai"
                password:
                  type: string
                  example: "admin123"
                adminSecret:
                  type: string
                  example: "super-admin-secret-2024-change-this"
      responses:
        201:
          description: First admin created successfully
        403:
          description: Admin already exists or invalid secret

  /auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        200:
          description: Login successful
        401:
          description: Invalid credentials

  /auth/me:
    get:
      summary: Get current user profile
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile retrieved successfully
        401:
          description: Unauthorized

  /users/profile:
    get:
      summary: Get user profile
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
        401:
          description: Unauthorized

    put:
      summary: Update user profile
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Smith"
      responses:
        200:
          description: Profile updated successfully
        401:
          description: Unauthorized

  /admin/users:
    get:
      summary: Get all users (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: role
          schema:
            type: string
            enum: [user, admin]
          description: Filter by role
        - in: query
          name: search
          schema:
            type: string
          description: Search by name or email
      responses:
        200:
          description: Users retrieved successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden (not admin)

  /admin/users/{id}:
    get:
      summary: Get user by ID (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User retrieved successfully
        404:
          description: User not found

    delete:
      summary: Delete user (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found

  /health:
    get:
      summary: Health check
      tags: [System]
      responses:
        200:
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                  uptime:
                    type: number

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, admin]
        isActive:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Admin
    description: Administrator endpoints
  - name: System
    description: System health endpoints